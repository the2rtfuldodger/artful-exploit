
def parse_db_scan_output(txt):
    lines = [str(z) for z in list(txt.split("\n"))]
    startLine, endLine = -1, -1
    for i in range(len(lines)):
        if lines[i].startswith("PORT"):
            startLine = i+1
        if (True or startLine >= 0) and (lines[i].find("Read data files from") >= 0 or lines[i].strip() == "" or lines[i].find("Nmap done") >= 0):
            endLine = i
    if endLine < 0:
        endLine = len(lines) - 1
    rlines = lines[startLine:endLine]
    #print("Rel lines DBSCAN (%d, %d):\n%s\n" % (startLine,endLine,"\n".join(rlines)))
    d = []
    for l in rlines:
        try:
            arr = l.split()
            arr0 = arr[0].split("/")
            if len(arr0) < 2:
                break
            desc = " ".join(arr[2:])
            d.append((arr0[0], arr[1], desc))
        except:
            pass
    return d


def parse_brute_dns_output(txt):
    lines = [str(z) for z in list(txt.split("\n"))]
    startLine, endLine = -1, -1
    for i in range(len(lines)):
        if lines[i].find("DNS Brute-force hostnames") > -1:
            startLine = i+1
        elif startLine >= 0 and (lines[i].strip() == "" or lines[i].find("Nmap done") >= 0):
            endLine = i-1
    if endLine < 0:
        #print("Lines [%d]: %s" % (len(lines),repr(lines)))
        endLine = len(lines) - 1
    relLines = lines[startLine:endLine]
    #print("Rel lines (%d, %d):\n%s\n" % (startLine,endLine,"\n".join(relLines)))
    if startLine < 0 or endLine < 0:
        return None
    d = {}
    for r in relLines:
        pieces = [x.strip() for x in r.split() if len(x.strip()) > 0]
        if len(pieces) == 4 and pieces[-2] == "-":
            d[pieces[-3]] = pieces[-1]
    return d
